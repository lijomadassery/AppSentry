apiVersion: apps/v1
kind: Deployment
metadata:
  name: appsentry-frontend
  namespace: appsentry
  labels:
    app: appsentry-frontend
    component: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: appsentry-frontend
  template:
    metadata:
      labels:
        app: appsentry-frontend
        component: frontend
    spec:
      containers:
      - name: frontend
        image: docker.io/lijomadassery/appsentry-frontend:master
        ports:
        - containerPort: 3000
          name: http
        env:
        # Kubernetes Downward API - Pod Metadata
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_CONTAINER_NAME
          value: "frontend"
        - name: K8S_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: K8S_CLUSTER_NAME
          value: "appsentry-cluster"
        
        # Application Configuration
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: REACT_APP_API_URL
          value: "/api"
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        livenessProbe:
          httpGet:
            path: /health.json
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /health.json
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: appsentry-frontend
  namespace: appsentry
  labels:
    app: appsentry-frontend
spec:
  selector:
    app: appsentry-frontend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: appsentry-ingress
  namespace: appsentry
spec:
  rules:
  - host: appsentry.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: appsentry-backend
            port:
              number: 3001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: appsentry-frontend
            port:
              number: 3000
  - host: localhost
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: appsentry-backend
            port:
              number: 3001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: appsentry-frontend
            port:
              number: 3000