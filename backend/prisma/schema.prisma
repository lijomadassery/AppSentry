// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  team_lead
  developer
  viewer
}

enum Environment {
  development
  staging
  production
}

enum HealthStatus {
  healthy
  degraded
  unhealthy
}

model User {
  id           String    @id @default(cuid()) @db.VarChar(36)
  username     String    @unique @db.VarChar(100)
  email        String    @unique @db.VarChar(255)
  displayName  String    @map("display_name") @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  role         UserRole  @default(viewer)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  teams       TeamMembership[]
  createdApplications Application[] @relation("ApplicationCreatedBy")
  modifiedApplications Application[] @relation("ApplicationModifiedBy")

  @@map("users")
}

model Team {
  id          String    @id @default(cuid()) @db.VarChar(36)
  name        String    @unique @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  members      TeamMembership[]
  applications Application[]
  
  @@map("teams")
}

model TeamMembership {
  userId String @map("user_id") @db.VarChar(36)
  teamId String @map("team_id") @db.VarChar(36)
  role   String @db.VarChar(50) // e.g., 'lead', 'member'

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@map("team_memberships")
}

model Application {
  id              String      @id @default(cuid()) @db.VarChar(36)
  name            String      @unique @db.VarChar(255)
  displayName     String      @map("display_name") @db.VarChar(255)
  description     String?     @db.Text
  environment     Environment
  healthUrl       String      @map("health_url") @db.VarChar(500)
  teamId          String?     @map("team_id") @db.VarChar(36)
  isActive        Boolean     @default(true) @map("is_active")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  createdBy       String      @map("created_by") @db.VarChar(36)
  lastModifiedBy  String      @map("last_modified_by") @db.VarChar(36)

  // Relations
  creator         User          @relation("ApplicationCreatedBy", fields: [createdBy], references: [id])
  lastModifier    User          @relation("ApplicationModifiedBy", fields: [lastModifiedBy], references: [id])
  team            Team?         @relation(fields: [teamId], references: [id])
  healthChecks    HealthCheck[]

  @@index([environment])
  @@index([isActive])
  @@map("applications")
}

model HealthCheck {
  id            String       @id @default(cuid()) @db.VarChar(36)
  applicationId String       @map("application_id") @db.VarChar(36)
  status        HealthStatus
  responseTime  Int?         @map("response_time_ms")
  details       Json?
  timestamp     DateTime     @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([timestamp])
  @@map("health_checks")
}